version
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales <- quarter_1_sales + quarter_2_sales
#our first calculations
quarter_1_sales <- 35657.98
quarter_2_sales <- 45567.01
midyear_sales <- quarter_1_sales + quarter_2_sales
midyear_sales
yearend_sales <- midyear_sales * 2
install.packages()
installed.packages()
install.packages("tidyverse")
library("tidyverse")
install.packages("rlang")
install.packages("tidyverse")
library("tidyverse")
install.packages(googledrive)
install.packages("googledrive")
install.packages("curl")
install.packages("httr")
install.packages("gargle")
install.packages("googledrive")
install.packages("ragg")
install.packages("textshaping")
install.packages("googlesheets4")
install.packages("ragg")
install.packages("ragg")
install.packages("ragg")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
View(ToothGrowth)
install.packages("dplyr")
library(dplyr)
filtered_tg <- filter(ToothGrowth, dose == 0.5)
filtered_tg
View(filtered_tg)
install.packages("here")
install.packages("skimr")
library("here")
library(here)
library(here)
library(skimr)
library("skimr")
install.packages("janitor")
install.packages("palmerpenguins")
library("palmerpenguins")
skim_without_charts(penguins)
penguins %>%
select(species)
penguins %>%
select(species)
library("dplyr")
penguins %>%
select(species)
penguins %>%
select(species)
penguins %>%
select(species)
library(palmerpenguins)
data(package = 'palmerpenguins')
library("tidyverse")
penguins %>% arrange(bill_lenght_mm)
penguins %>% arrange(bill_lenght_mm)
penguins %>% arrange("bill_lenght_mm")
penguins %>% arrange("-bill_lenght_mm")
penguins2 <- penguins %>% arrange("-bill_length_mm")
penguins %>% group_by("island") %>% drop_na() %>% summarize(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island) %>% drop_na() %>% summarize(mean_bill_length_mm = mean(bill_length_mm))
penguins %>% group_by(island) %>% drop_na() %>% summarize(max_bill_length_mm = max(bill_length_mm))
penguins %>% group_by(species, island) %>% drop_na() %>% summarize(max_bill_length = max(bill_length_mm), mean_bl = mean(bill_length_mm, na.rm = TRUE))
penguins %>% filter(species == "Adelie")
library(tidyverse)
library(tidyverse)
library(skimr)
library(janitor)
head(bookings_df)
booking._df <- read_csv("/home/nicolas/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.5 Limpar dados em R/hotel_bookings.csv")
booking_df <- read_csv("/home/nicolas/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.5 Limpar dados em R/hotel_bookings.csv")
bookings_df <- read_csv("/home/nicolas/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.5 Limpar dados em R/hotel_bookings.csv")
head(bookings_df)
booking_df <- read_csv("/home/nicolas/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.5 Limpar dados em R/hotel_bookings.csv", locale = locale(encoding = "latin1"))
head(bookings_df)
View(booking_df)
View(booking_df)
bookings_df <- read_csv("/home/nicolas/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.5 Limpar dados em R/hotel_bookings.csv", locale = locale(encoding = "latin1"))
head(bookings_df)
str(bookings_df)
glimpse(bookings_df)
colnames(bookings_df)
skim_without_charts(bookings_df)
trimmed_df <- bookings_df %>%
select(hotel, is_canceled, lead_time)
trimmed_df %>%
select(hotel, is_canceled, lead_time) %>%
rename(hotel_type = hotel)
example_df <- bookings_df %>%
select(arrival_date_year, arrival_date_month) %>%
unite(arrival_month_year, c("arrival_date_month", "arrival_date_year"), sep = " ")
example_df <- bookings_df %>%
mutate(guests = adults + children + babies)
example_df <- bookings_df %>%
mutate(number_canceled = sum(is_canceled),
average_lead_time = mean(lead_time))
head(example_df)
example_df <- bookings_df %>%
summarize(number_canceled = sum(is_canceled),
average_lead_time = mean(lead_time))
head(example_df)
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job title <- c("Professional", "Programmer", "Management", "Clerical",
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job title <- c("Professional", "Programmer", "Management", "Clerical",
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job_title <- c("Professional", "Programmer", "Management", "Clerical", "Developer", "Programmer", "Management", "Clerical", "Developer", "Programmer")
employee <- data.frame(id, name, job_title)
print(employee)
separate(employee, name, into = c('first_name',  'last_name'), sep=' ')
employee <- data.frame(id, name, job_title)
print(employee)
# Separando o nome em primeiro e último nome
employee <- separate(employee, name, into = c('first_name',  'last_name'), sep=' ')
install.packages("tidyr")
employee <- data.frame(id, name, job_title)
print(employee)
# Separando o nome em primeiro e último nome
employee <- separate(employee, name, into = c('first_name',  'last_name'), sep=' ')
# Carregando o pacote tidyr
library(tidyr)
employee <- data.frame(id, name, job_title)
print(employee)
# Separando o nome em primeiro e último nome
employee <- separate(employee, name, into = c('first_name',  'last_name'), sep=' ')
print(employee)
library(dplyr)
library(palmerpenguins)
data("penguins")
penguins_sorted <- penguins %>%
arrange(bill_length_mm)
penguins_sorted
menor_comprimento_bico <- min(penguins_sorted$bill_length_mm)
menor_comprimento_bico
print(menor_comprimento_bico)
sum(is.na(penguins_sorted$bill_length_mm))
install.packages("Tmisc")
library(Tmisc)
data(quartet)
View(quartet)
quartet %>%
group_by(set) %>%
summarize(mean(x), sd(x), mean(y), sd(y), cor(x, y))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("Tmisc")
library(Tmisc)
data(quartet)
View(quartet)
quartet %>%
group_by(set) %>%
summarize(mean(x), sd(x), mean(y), sd(y), cor(x, y))
ggplot(quarter, aes(x,y)) + geom_point() + geom_smooth(method=lm, se=FALSE) + facet_wrap(-set)
library(ggplot2)
ggplot(quarter, aes(x,y)) + geom_point() + geom_smooth(method=lm, se=FALSE) + facet_wrap(-set)
ggplot(quartet, aes(x,y)) + geom_point() + geom_smooth(method=lm, se=FALSE) + facet_wrap(-set)
ggplot(quartet, aes(x,y)) + geom_point() + geom_smooth(method=lm, se=FALSE) + facet_wrap(~set)
install.packages("datasauRus")
library("datasauRus")
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset)) + geom_point() + theme_void + theme(legend.position = "none") + facet_wrap(~dataset, ncol = 3)
ggplot(datasaurus_dozen, aes(x = x, y = y, colour = dataset)) +
geom_point() +
theme_void() +
theme(legend.position = "none") +
facet_wrap(~dataset, ncol = 3)
install.packages("SimDesign")
library(SimDesing)
library(SimDesing)
library(SimDesing)
library("SimDesing")
install.packages("SimDesign")
bias(actual_temp, predicted_temp)
actual_temp <- c(68.3, 70, 72.4, 71, 67, 70)
predicted_temp <- c(67.9, 69, 71.5, 70, 67, 69)
bias(actual_temp, predicted_temp)
library("SimDesing")
library(SimDesing)
library(SimDesign)
ias(actual_temp, predicted_temp)
bias(actual_temp, predicted_temp)
actual_sales <- c(150, 203, 137, 247, 116, 287)
predicted_temp <- c(200, 300, 150, 250, 1)
bias(actual_sales, predicted_temp)
bias(actual_sales, predicted_temp)
actual_sales <- c(150, 203, 137, 247, 116, 287)
predicted_temp <- c(200, 300, 150, 250, 150, 1)
bias(actual_sales, predicted_temp)
actual_sales <- c(150, 203, 137, 247, 116, 287)
predicted_temp <- c(200, 300, 150, 250, 150, 300)
bias(actual_sales, predicted_temp)
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
setwd("~/Projects/exercises/Coursera_Data_Analytics/Course 7/Week 3/3.3 Como mudar seus dados")
hotel_bookings <- read_csv("hotel_bookings.csv")
library(tidyverse)
library(skimr)
library(janitor)
hotel_bookings <- read_csv("hotel_bookings.csv")
hotel_bookings <- read_csv("hotel_bookings.csv")
hotel_bookings <- read_csv("hotel_bookings.csv", fileEncoding = "UTF-8")
hotel_bookings <- read_csv("hotel_bookings.csv", locale = locale(encoding = "UTF-8"))
hotel_bookings <- read_csv("hotel_bookings.csv", locale = locale(encoding = "latin1"))
View(hotel_bookings)
hotel_bookings <- read_csv("hotel_bookings.csv")
# Descobre o encoding correto do arquivo
encoding_info <- guess_encoding("hotel_bookings.csv")
# Visualiza as informações sobre o encoding detectado
encoding_info
hotel_bookings <- read_csv("hotel_bookings.csv", locale = locale(encoding = "windows-1252"))
hotel_bookings <- read_csv("hotel_bookings.csv")
View(hotel_bookings)
head(hotel_bookings)
# Etapa 1: Carregar pacotes
install.packages("tidyverse")
install.packages("skimr")
install.packages("janitor")
library(tidyverse)
library(skimr)
library(janitor)
# Etapa 2: Importar dados
# Certifique-se de estar no diretório correto
# setwd("projects/Course 7/Week 3")
hotel_bookings <- read_csv("hotel_bookings.csv")
# Etapa 3: Conhecendo seus dados
head(hotel_bookings)
# Teste prático
# 1. Quantas colunas há neste conjunto de dados? A: 45 B: 100 C: 32 D: 60
# 2. A variável 'arrival_date_month' é um dado do tipo chr ou caractere. A: Verdadeiro B: Falso
str(hotel_bookings)
glimpse(hotel_bookings)
colnames(hotel_bookings)
# Como manipular seus dados
arrange(hotel_bookings, desc(lead_time))
arrange(hotel_bookings, lead_time)
head(hotel_bookings)
hotel_bookings_v2 <- arrange(hotel_bookings, desc(lead_time))
head(hotel_bookings_v2)
max(hotel_bookings$lead_time)
min(hotel_bookings$lead_time)
# Cuidado com o erro comum
# min(lead_time)  # Isto resultará em um erro, pois precisa do dataframe especificado
mean(hotel_bookings$lead_time)
mean(hotel_bookings_v2$lead_time)
# Teste prático
# Qual é o tempo de espera médio? A: 100,0011 B: 45,0283 C: 14,0221 D: 104,0114
hotel_bookings_city <- filter(hotel_bookings, hotel == "City Hotel")
head(hotel_bookings_city)
mean(hotel_bookings_city$lead_time)
hotel_summary <-
hotel_bookings %>%
group_by(hotel) %>%
summarise(average_lead_time = mean(lead_time),
min_lead_time = min(lead_time),
max_lead_time = max(lead_time))
head(hotel_summary)
install.packages("tidyverse")
library(tidyverse)
library(skimr)
library(janitor)
# Etapa 2: Importar dados
# Certifique-se de estar no diretório correto
hotel_bookings <- read_csv("hotel_bookings.csv")
# Etapa 3: Conhecendo seus dados
head(hotel_bookings)
# Teste prático
# 1. Quantas colunas há neste conjunto de dados? A: 45 B: 100 C: 32 D: 60
# 2. A variável 'arrival_date_month' é um dado do tipo chr ou caractere. A: Verdadeiro B: Falso
str(hotel_bookings)
glimpse(hotel_bookings)
colnames(hotel_bookings)
# Como manipular seus dados
arrange(hotel_bookings, desc(lead_time))
arrange(hotel_bookings, lead_time)
head(hotel_bookings)
hotel_bookings_v2 <- arrange(hotel_bookings, desc(lead_time))
head(hotel_bookings_v2)
max(hotel_bookings$lead_time)
min(hotel_bookings$lead_time)
# Cuidado com o erro comum
# min(lead_time)  # Isto resultará em um erro, pois precisa do dataframe especificado
mean(hotel_bookings$lead_time)
mean(hotel_bookings_v2$lead_time)
# Teste prático
# Qual é o tempo de espera médio? A: 100,0011 B: 45,0283 C: 14,0221 D: 104,0114
hotel_bookings_city <- filter(hotel_bookings, hotel == "City Hotel")
head(hotel_bookings_city)
mean(hotel_bookings_city$lead_time)
hotel_summary <-
hotel_bookings %>%
group_by(hotel) %>%
summarise(average_lead_time = mean(lead_time),
min_lead_time = min(lead_time),
max_lead_time = max(lead_time))
head(hotel_summary)
mean(hotel_bookings$lead_time)
library(datasets)  # Se não estiver carregado
# Carregar o conjunto de dados ToothGrowth
data("ToothGrowth")
# Usar a função glimpse() para obter um resumo do conjunto de dados
glimpse(ToothGrowth)
library(palmerpenguins)
library(dplyr)
# Carregar os dados dos pinguins
data("penguins")
# Filtrar somente a espécie "Adelie"
adelie_penguins <- penguins %>%
filter(species == "Adelie")
# Visualizar as primeiras linhas do novo conjunto de dados
head(adelie_penguins)
# Visualizar as primeiras linhas do novo conjunto de dados
head(adelie_penguins)
adelie_penguins <- penguins %>%
filter(Adelie == species)
adelie_penguins <- penguins %>%
filter("Adelie" == species)
library(skimr)
# Carregar o conjunto de dados ToothGrowth
data(ToothGrowth)
# Usar a função skim sem os gráficos
skim_without_charts(ToothGrowth)
