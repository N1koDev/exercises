knitr::opts_chunk$set(echo = TRUE)
require(stats)
head(stackloss)
help(stackloss)
# Ajuste do modelo de regressão linear
fit <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = stackloss)
# Sumário do modelo
summary(fit)
fit <- lm(stack.loss ~ ., data = stackloss)
summary(fit)
# Predição do valor de stack.loss para Air.Flow=72, Water.Temp=20, Acid.Conc=85
new_data <- data.frame(Air.Flow = 72, Water.Temp = 20, Acid.Conc. = 85)
prediction <- predict(fit, newdata = new_data)
print(prediction)
# Diferença entre o valor obtido pelo modelo e o valor encontrado na base
real_value <- stackloss[stackloss$Air.Flow == 72 &
stackloss$Water.Temp == 20 &
stackloss$Acid.Conc. == 85, "stack.loss"]
difference <- prediction - real_value
print(difference)
# Identificação do atributo que contribui mais positivamente para o incremento de stack.loss
coefficients <- coef(fit)
print(coefficients)
# Verificação se a regressão linear é uma boa aproximação dos dados
rsquared <- summary(fit)$r.squared
print(rsquared)
# Ajustando o modelo de regressão linear
fit <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = stackloss)
# Exibindo o resumo do modelo
print(summary(fit))
# Ajustando o modelo de regressão linear
fit <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = stackloss)
# Exibindo o resumo do modelo
print(summary(fit))
# Criando um novo conjunto de dados para a predição
new_data <- data.frame(Air.Flow = 72, Water.Temp = 20, Acid.Conc. = 85)
# Fazendo a predição
prediction <- predict(fit, newdata = new_data)
# Exibindo o valor predito
print(prediction)
# Encontrando o valor real presente na base
real_value <- stackloss[stackloss$Air.Flow == 72 & stackloss$Water.Temp == 20 & stackloss$Acid.Conc. == 85, "stack.loss"]
# Calculando a diferença percentual
difference <- ((prediction - real_value) / real_value) * 100
# Exibindo a diferença percentual
print(difference)
# Normalizando os dados
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
stack_n <- as.data.frame(lapply(stackloss, normalize))
# Ajustando um novo modelo com dados normalizados
fit_n <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = stack_n)
# Exibindo os coeficientes do modelo ajustado
print(coefficients(fit_n))
# Normalizando os dados
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
stack_n <- as.data.frame(lapply(stackloss, normalize))
# Ajustando um novo modelo com dados normalizados
fit_n <- lm(stack.loss ~ Air.Flow + Water.Temp + Acid.Conc., data = stack_n)
# Exibindo os coeficientes do modelo ajustado
print(coefficients(fit_n))
# Exibindo o resumo do modelo para verificar o R-squared
print(summary(fit)$r.squared)
# Ajustando um novo modelo sem o atributo não significativo (Acid.Conc.)
fit_new <- lm(stack.loss ~ Air.Flow + Water.Temp, data = stackloss)
# Exibindo o resumo do novo modelo
print(summary(fit_new))
# Exibindo o novo valor de R-squared
print(summary(fit_new)$r.squared)
# Exibindo os coeficientes do novo modelo
print(coefficients(fit_new))
# Calculando a diferença percentual dos R-squared
old_r_squared <- summary(fit)$r.squared
new_r_squared <- summary(fit_new)$r.squared
difference_percent <- ((new_r_squared - old_r_squared) / old_r_squared) * 100
# Verificando se a diferença é menor que 5%
if (abs(difference_percent) < 5) {
print("Sim, o novo modelo é melhor.")
} else {
print("Não, o modelo anterior é melhor.")
}
# Exercício 3
Considere a base.
# Calculando a diferença percentual dos R-squared
old_r_squared <- summary(fit)$r.squared
new_r_squared <- summary(fit_new)$r.squared
difference_percent <- ((new_r_squared - old_r_squared) / old_r_squared) * 100
# Verificando se a diferença é menor que 5%
if (abs(difference_percent) < 5) {
print("Sim, o novo modelo é melhor.")
} else {
print("Não, o modelo anterior é melhor.")
}
# Carregando a biblioteca necessária
library(ggplot2)
install.packages(tidyverse)
install.packages("tidyverse")
# Carregando a biblioteca necessária
library(ggplot2)
# Construindo o modelo de regressão
fit <- lm(CO2EMISSIONS ~ FUELCONSUMPTION_COMB, data = df)
df = read.csv('https://meusite.mackenzie.br/rogerio/TIC/FuelConsumptionCo2.csv',header=T)
df = read.csv('FuelConsumptionCo2.csv',header=T)
head(df)
# Carregando a biblioteca necessária
library(ggplot2)
# Construindo o modelo de regressão
fit <- lm(CO2EMISSIONS ~ FUELCONSUMPTION_COMB, data = df)
# Plotando o gráfico de dispersão com a reta de regressão
ggplot(df, aes(x = FUELCONSUMPTION_COMB, y = CO2EMISSIONS)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Regressão de CO2EMISSIONS vs FUELCONSUMPTION_COMB",
x = "FUELCONSUMPTION_COMB",
y = "CO2EMISSIONS")
# Exibindo o valor de R-squared
print(summary(fit)$r.squared)
# Criando um novo conjunto de dados para predição
new_data <- data.frame(FUELCONSUMPTION_COMB = c(10, 25))
# Realizando a predição
predictions <- predict(fit, newdata = new_data)
# Exibindo as predições
print(predictions)
# Acrescentando a variável ENGINESIZE ao modelo
fit_with_enginesize <- lm(CO2EMISSIONS ~ FUELCONSUMPTION_COMB + ENGINESIZE, data = df)
# Exibindo o resumo do novo modelo
print(summary(fit_with_enginesize))
# Exibindo os coeficientes do novo modelo
print(coefficients(fit_with_enginesize))
# Exibindo o valor de R-squared do novo modelo
print(summary(fit_with_enginesize)$r.squared)
# Comparando os R-squared dos dois modelos
if (summary(fit_with_enginesize)$r.squared > summary(fit)$r.squared) {
print("Sim, o novo modelo é melhor que o anterior.")
} else {
print("Não, o modelo anterior é melhor.")
}
# Criando um novo conjunto de dados para predição
new_data <- data.frame(FUELCONSUMPTION_COMB = 10, ENGINESIZE = 2)
# Realizando a predição
prediction <- predict(fit_with_enginesize, newdata = new_data)
# Exibindo a predição
print(prediction)
# Exibindo os coeficientes do novo modelo
print(coefficients(fit_new))
# Exibindo o novo valor de R-squared
print(summary(fit_new)$r.squared)
